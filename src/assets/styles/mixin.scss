@mixin thinBorder($directionMaps: bottom, $color: #ddd, $radius:(0, 0, 0, 0), $position: after) {
  // 是否只有一个方向
  $isOnlyOneDir: string==type-of($directionMaps);

  @if ($isOnlyOneDir) {
      $directionMaps: ($directionMaps);
  }

  @each $directionMap in $directionMaps {
      border-#{$directionMap}: 1px solid $color;
  }

  // 判断圆角是list还是number
  @if(list==type-of($radius)) {
      border-radius: nth($radius, 1) nth($radius, 2) nth($radius, 3) nth($radius, 4);
  }

  @else {
      border-radius: $radius;
  }

  @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      & {
          position: relative;

          // 删除1像素密度比下的边框
          @each $directionMap in $directionMaps {
              border-#{$directionMap}: none;
          }
      }

      &:#{$position} {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          display: block;
          width: 200%;
          height: 200%;
          transform: scale(0.5);
          box-sizing: border-box;
          padding: 1px;
          transform-origin: 0 0;
          pointer-events: none;
          border: 0 solid $color;

          @each $directionMap in $directionMaps {
              border-#{$directionMap}-width: 1px;
          }

          // 判断圆角是list还是number
          @if(list==type-of($radius)) {
              border-radius: nth($radius, 1)*2 nth($radius, 2)*2 nth($radius, 3)*2 nth($radius, 4)*2;
          }

          @else {
              border-radius: $radius*2;
          }

      }
  }

  @media only screen and (-webkit-min-device-pixel-ratio: 3) {
      &:#{$position} {

          // 判断圆角是list还是number
          @if(list==type-of($radius)) {
              border-radius: nth($radius, 1)*3 nth($radius, 2)*3 nth($radius, 3)*3 nth($radius, 4)*3;
          }

          @else {
              border-radius: $radius*3;
          }

          width: 300%;
          height: 300%;
          transform: scale(0.3333);
      }
  }
}

/* 单边边框 */
@each $dir in (top,right,bottom,left) {
  .border-#{$dir}-#{1}px {
    @include thinBorder( $dir);
  }
}

/*颜色边框*/
.border-red-1px{
  @include thinBorder((top,right,bottom,left), red, 5px);
}

/*圆角边框*/
.border-top-left-round-1px{
  @include thinBorder(top, red, 100px);
}

/*使用:before去生成边框*/
.border-top-before{
  @include thinBorder(top, red, 0, before);
}

/**
* 溢出省略号
* @param {Number} 行数
*/
@mixin ellipsis($rowCount: 1) {
  @if $rowCount <=1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $rowCount;
    -webkit-box-orient: vertical;
  }
}

/*example*/
.ellipsis {
  @include ellipsis
}

/**
* 等边三角形
* @param {String} 尺寸
* @param {Color} 颜色
* @param {String} 方向
*/
@mixin triangle($size: 5px, $color: rgba(0, 0, 0, 0.6), $dir: bottom) {
  width: 0;
  height: 0;
  border-style: solid;

  @if (bottom==$dir) {
    border-width: $size $size 0 $size;
    border-color: $color transparent transparent transparent;
  } @else if (top==$dir) {
    border-width: 0 $size $size $size;
    border-color: transparent transparent $color transparent;
  } @else if (right==$dir) {
    border-width: $size 0 $size $size;
    border-color: transparent transparent transparent $color;
  } @else if (left==$dir) {
    border-width: $size $size $size 0;
    border-color: transparent $color transparent transparent;
  }
}
/*example*/
.triangle {
  @include triangle(15px,#ddd,bottom)
}

/*半圆Loading*/
@mixin loading-half-circle($width: 10px) {
  display: inline-block;
  height: $width;
  width: $width;
  border-radius: $width;
  border-style: solid;
  border-width: $width/10;
  border-color: transparent currentColor transparent transparent;
  animation: rotate 0.6s linear infinite;
  vertical-align: middle;
}

/*example*/
.loading-half-circle {
  @include loading-half-circle(100px)
}

/**
* 棋盘背景
* @param {Color} 背景色
*/
@mixin bgChessboard($color: #aaa) {
  background-image: linear-gradient(
      45deg,
      $color 25%,
      transparent 25%,
      transparent 75%,
      $color 75%,
      $color
    ),
    linear-gradient(
      45deg,
      $color 26%,
      transparent 26%,
      transparent 74%,
      $color 74%,
      $color
    );
  background-size: 10vw 10vw;
  background-position: 0 0, 5vw 5vw;
}

/**/
.chessboard {
  @include bgChessboard
}

// 背景图片
// @mixin bg-image($url){
//   background-image: url($url + "@2x.png");
//   @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3){
//     background-image: url($url + "@3x.png");
//   }
// }
/*example*/
// .logo{
//     @include bg-image(logo);
// }

/*透明度*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
/*example*/
.opacity {
  @include opacity(0.8);
}

/*清除浮动*/
@mixin clearfix() {
  &:before,
  &:after {
      content: "";
      display: table;
  }
  &:after {
      clear: both;
  }
}
/*example*/
.clearfix {
  @include clearfix()
}

/*美化占位符 placeholder 样式*/
@mixin beauty-placeholder($fz, $color: #999, $align: left) {
  &:-moz-placeholder {
    font-size: $fz;
    color: $color;
    text-align: $align;
  }
  &:-ms-input-placeholder {
    font-size: $fz;
    color: $color;
    text-align: $align;
  }
  &::-webkit-input-placeholder {
    font-size: $fz;
    color: $color;
    text-align: $align;
  }
}
/*example*/
.input{
    @include beauty-placeholder(25px, #eee, left)
}

/*美化文本选中*/
@mixin beauty-select($color, $bgcolor) {
  &::selection {
    color: $color;
    background-color: $bgcolor;
  }
}
/*example*/
.beauty-select {
    @include beauty-select(#fff, #000)
}

/*毛玻璃效果*/
@mixin blur($blur: 10px) {
  -webkit-filter: blur($blur);
  -moz-filter: blur($blur);
  -o-filter: blur($blur);
  -ms-filter: blur($blur);
  filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius='${blur}');
  filter: blur($blur);
  *zoom: 1;
}
/*example*/
.blur {
    @include blur(10px)
}

/*滤镜: 将彩色照片显示为黑白照片、保留图片层次*/
@mixin grayscale() {
  -webkit-filter: grayscale(100%);
  -moz-filter: grayscale(100%);
  -ms-filter: grayscale(100%);
  -o-filter: grayscale(100%);
  filter: grayscale(100%);
}
/*example*/
.img {
    @include grayscale()
}

/*文本居中*/
@mixin center($height:100%){
  height: $height;
  line-height: $height;
  text-align: center
}
/*example*/
.center{
  color: #fff;
  @include center(30px)
}

/*flex*/
@mixin flex ($direction: row, $justify-content: flex-start, $align-items: flex-start,$flex-wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify-content;
  align-items: $align-items;
  flex-wrap: $flex-wrap;
}
/*example*/
.flex {
  @include flex(row,flex-start,flex-start,wrap)
}

@mixin hoverLine($height:2px, $color:$color-text-primary){
  position: relative;
  &:hover::after{
          content: '';
          position: absolute;
          height: $height;
          width: 100%;
          background-color: $color;
          bottom: 0;
          left: 0;
}
}

/*example*/
span{
  @include hoverLine(2px, #fff);
  }
